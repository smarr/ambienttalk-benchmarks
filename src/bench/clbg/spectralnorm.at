/*
 spectral norm: Calculate an eigenvalue using the power method
 
  This benchmark is based on the Computer Language Benchmarks Game.
  http://benchmarksgame.alioth.debian.org/
*/

/*if: system.argv.length == 0 then: {
  system.println("Usage: spectralnorm.at <num>");
  system.exit();
};*/

def n := 100;

if: system.argv.length >= 1 then: {
  n := system.argv[1].parseNumeric();
};


def approximate(n) {
  // create unit vector
  def u[n] { 1.0 };
      
  def v[n] { 0.0 };
  
  10.doTimes: { | i |
    multiplyAtAv(n,u,v);
    multiplyAtAv(n,v,u);
  };
      
  // B=AtA         A multiplied by A transposed
  // v.Bv /(v.v)   eigenvalue of v
  def vBv := 0.0;
  def vv  := 0.0;
  
  1.to: n + 1 do: { | i |
    vBv := vBv + u[i]*v[i];
    vv  := vv  + v[i]*v[i];
  };
      
  (vBv / vv).sqrt()
};

/* return element i,j of infinite matrix A */
def a(i, j) {
  1.0 / ((i + j)*(i + j + 1)/2.0 + i + 1.0)
};
   
/* multiply vector v by matrix A */
def multiplyAv(n, v, av){
  1.to: n + 1 do: { | i |
    av[i] := 0.0;
    1.to: n + 1 do: { | j | av[i] := av[i] + a(i-1,j-1) * v[j] };
  }
};
   
/* multiply vector v by matrix A transposed */
def multiplyAtv(n, v, atv) {
  1.to: n + 1 do: { | i |
    atv[i] := 0.0;
    1.to: n + 1 do: { | j | atv[i] := atv[i] + a(j-1, i-1) * v[j] };
  }
};
   
/* multiply vector v by matrix A and then by matrix A transposed */
def multiplyAtAv(n, v, atAv) {
  def u[n] { 0.0 };
  multiplyAv( n, v, u);
  multiplyAtv(n, u, atAv);
};

system.println(approximate(n));