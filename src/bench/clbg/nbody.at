/*
  n-body: Double-precision N-body simulation

  This benchmark is based on the Computer Language Benchmarks Game.
  http://benchmarksgame.alioth.debian.org/
*/

if: system.argv.length == 0 then: {
  system.println("Usage: nbody.at <num>");
  system.exit();
};

def n := 1000;

if: system.argv.length >= 1 then: {
  n := system.argv[1].parseNumeric();
};

def PI            := 3.141592653589793;
def SOLAR_MASS    := 4 * PI * PI;
def DAYS_PER_YEAR := 365.24; 

def Body := object: {
  def  x; def  y; def  z;
  def vx; def vy; def vz;
  def mass;
    
  def offsetMomentum(px, py, pz) {
    vx := -px / SOLAR_MASS;
    vy := -py / SOLAR_MASS;
    vz := -pz / SOLAR_MASS;
    self
  }
};

def jupiter() {
  def p := Body.new();
  p.x  :=   4.84143144246472090e+00;
  p.y  :=  -1.16032004402742839e+00;
  p.z  :=  -1.03622044471123109e-01;
  p.vx :=   1.66007664274403694e-03 * DAYS_PER_YEAR;
  p.vy :=   7.69901118419740425e-03 * DAYS_PER_YEAR;
  p.vz :=  -6.90460016972063023e-05 * DAYS_PER_YEAR;
  p.mass := 9.54791938424326609e-04 * SOLAR_MASS;
  p
};

def saturn() {
  def p := Body.new();
  p.x    :=  8.34336671824457987e+00;
  p.y    :=  4.12479856412430479e+00;
  p.z    := -4.03523417114321381e-01;
  p.vx   := -2.76742510726862411e-03 * DAYS_PER_YEAR;
  p.vy   :=  4.99852801234917238e-03 * DAYS_PER_YEAR;
  p.vz   :=  2.30417297573763929e-05 * DAYS_PER_YEAR;
  p.mass :=  2.85885980666130812e-04 * SOLAR_MASS;
  p
};

def uranus() {
  def p := Body.new();
  p.x    :=  1.28943695621391310e+01;
  p.y    := -1.51111514016986312e+01;
  p.z    := -2.23307578892655734e-01;
  p.vx   :=  2.96460137564761618e-03 * DAYS_PER_YEAR;
  p.vy   :=  2.37847173959480950e-03 * DAYS_PER_YEAR;
  p.vz   := -2.96589568540237556e-05 * DAYS_PER_YEAR;
  p.mass :=  4.36624404335156298e-05 * SOLAR_MASS;
  p
};

def neptune() {
  def p := Body.new();
  p.x    :=  1.53796971148509165e+01;
  p.y    := -2.59193146099879641e+01;
  p.z    :=  1.79258772950371181e-01;
  p.vx   :=  2.68067772490389322e-03 * DAYS_PER_YEAR;
  p.vy   :=  1.62824170038242295e-03 * DAYS_PER_YEAR;
  p.vz   := -9.51592254519715870e-05 * DAYS_PER_YEAR;
  p.mass :=  5.15138902046611451e-05 * SOLAR_MASS;
  p;
};

def sun() {
  def s := Body.new();
  s.x  := 0; s.y  := 0; s.z  := 0;
  s.vx := 0; s.vy := 0; s.vz := 0;
  s.mass := SOLAR_MASS;
  s
};

def BodySystem := object: {
  def bodies := [sun(), jupiter(), saturn(), uranus(), neptune()];
  
  def init() {
    def px := 0.0;
    def py := 0.0;
    def pz := 0.0;
    foreach: { | body |
      px := px + body.vx * body.mass;
      py := py + body.vy * body.mass;
      pz := pz + body.vz * body.mass;
    } in: bodies;
  
    bodies.at(1).offsetMomentum(px, py, pz);
  };
  
  def advance(dt) {
    1.to: bodies.length() + 1 do: { | i |
      def body := bodies.at(i);
      
      (i + 1).to: bodies.length() + 1 do: { | j |
        def bodyJ := bodies.at(j);
        def dx := body.x - bodyJ.x;
        def dy := body.y - bodyJ.y;
        def dz := body.z - bodyJ.z;
        
        def distance := (dx * dx + dy * dy + dz * dz).sqrt();
        def mag := dt / (distance * distance * distance);

        body.vx  := body.vx  - dx * bodyJ.mass * mag;
        body.vy  := body.vy  - dy * bodyJ.mass * mag;
        body.vz  := body.vz  - dz * bodyJ.mass * mag;

        bodyJ.vx := bodyJ.vx + dx * body.mass  * mag;
        bodyJ.vy := bodyJ.vy + dy * body.mass  * mag;
        bodyJ.vz := bodyJ.vz + dz * body.mass  * mag;
      }
    };
    
    foreach: { | body |
      body.x := body.x + dt * body.vx;
      body.y := body.y + dt * body.vy;
      body.z := body.z + dt * body.vz;
    } in: bodies;
  };
  
  def energy() {
    def dx; def dy; def dz;
    def distance;
    def e := 0.0;

    1.to: bodies.length() + 1 do: { | i |
      def body := bodies.at(i);
      e := e + 0.5 * body.mass *
               ( body.vx * body.vx
               + body.vy * body.vy
               + body.vz * body.vz );
     
      (i + 1).to: bodies.length() + 1 do: { | j |
        def bodyJ := bodies.at(j);
        dx := body.x - bodyJ.x;
        dy := body.y - bodyJ.y;
        dz := body.z - bodyJ.z;

        distance := (dx*dx + dy*dy + dz*dz).sqrt();
        e := e - (body.mass * bodyJ.mass) / distance;
      }
    };
    e
  }
};

def bodies := BodySystem.new();
system.println(bodies.energy());
n.doTimes: { | i | bodies.advance(0.01); };
system.println(bodies.energy());